from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
from apps.prefeituras.models import Prefeitura
from apps.usuarios.models import Usuario
import os
import hashlib
from PIL import Image
from io import BytesIO
from django.core.files.base import ContentFile

# ----------------------------------------
# Upload path dos anexos da notifica√ß√£o
# ----------------------------------------
def upload_anexo_path_notificacao(instance, filename):
    # media/notificacoes/anexos/<notificacao_id>/<filename>
    return f"notificacoes/anexos/{instance.notificacao.id}/{filename}"


from utils.protocolo import gerar_protocolo
from utils.choices import (
    PESSOA_TIPO_CHOICES,
    NOTIFICACAO_STATUS_CHOICES,
    DOC_TIPO_CHOICES,
)

class Notificacao(models.Model):
    # üîπ Identifica√ß√£o
    # Aumentado para 64 para comportar matr√≠cula no protocolo (ex.: IBGE-SIGLA-DATA-MATRICULA)
    protocolo = models.CharField(max_length=64, unique=True, editable=False)
    prefeitura = models.ForeignKey(Prefeitura, on_delete=models.PROTECT)
    denuncia = models.ForeignKey("denuncias.Denuncia", null=True, blank=True, on_delete=models.SET_NULL)

    # üîπ Dados do notificado
    pessoa_tipo = models.CharField(max_length=20, choices=PESSOA_TIPO_CHOICES)
    nome_razao = models.CharField("Nome / Raz√£o Social", max_length=255)
    cpf_cnpj = models.CharField(max_length=18, blank=True, null=True)
    rg = models.CharField(max_length=20, blank=True, null=True)
    telefone = models.CharField(max_length=20, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)

    # üîπ Endere√ßo
    cep = models.CharField(max_length=9, blank=True, null=True)
    logradouro = models.CharField(max_length=255)
    numero = models.CharField(max_length=20, blank=True, null=True)
    complemento = models.CharField(max_length=100, blank=True, null=True)
    bairro = models.CharField(max_length=100)
    cidade = models.CharField(max_length=100)
    uf = models.CharField(max_length=2, default="CE")

    # üîπ Geolocaliza√ß√£o (opcional ‚Äì √∫til quando n√£o vier de Den√∫ncia)
    latitude = models.DecimalField(
        "Latitude",
        max_digits=9,
        decimal_places=6,
        null=True, blank=True,
        validators=[MinValueValidator(-90.0), MaxValueValidator(90.0)],
        help_text="Ex.: -3.876543"
    )
    longitude = models.DecimalField(
        "Longitude",
        max_digits=9,
        decimal_places=6,
        null=True, blank=True,
        validators=[MinValueValidator(-180.0), MaxValueValidator(180.0)],
        help_text="Ex.: -38.654321"
    )

    # üîπ Dados da notifica√ß√£o
    descricao = models.TextField("Descri√ß√£o da irregularidade")
    documento_tipo = models.CharField("Tipo de Documento", max_length=30, choices=DOC_TIPO_CHOICES, blank=True, null=True)
    prazo_regularizacao = models.DateField(blank=True, null=True)
    status = models.CharField(max_length=20, choices=NOTIFICACAO_STATUS_CHOICES, default="ABERTA")

    # Dados construtivos (para edifica√ß√µes)
    area_m2 = models.DecimalField("√Årea (m¬≤)", max_digits=10, decimal_places=2, null=True, blank=True)
    testada_m = models.DecimalField("Testada (m)", max_digits=10, decimal_places=2, null=True, blank=True)
    pe_direito_m = models.DecimalField("P√©-direito (m)", max_digits=10, decimal_places=2, null=True, blank=True)
    duplex = models.BooleanField("Unidade duplex", default=False)
    qtd_comodos = models.PositiveIntegerField("Qtd. de c√¥modos (casas)", null=True, blank=True)
    compartimentacao = models.BooleanField("Compartimenta√ß√£o (galp√£o)", default=False)
    divisorias = models.BooleanField("Divis√≥rias (galp√£o)", default=False)
    mezanino = models.BooleanField("Possui mezanino", default=False)
    area_mezanino_m2 = models.DecimalField("√Årea do mezanino (m¬≤)", max_digits=10, decimal_places=2, null=True, blank=True)

    # üîπ Auditoria
    criada_em = models.DateTimeField(default=timezone.now)
    atualizada_em = models.DateTimeField(auto_now=True)
    criada_por = models.ForeignKey(Usuario, on_delete=models.SET_NULL, null=True, related_name="notificacoes_criadas")
    atualizada_por = models.ForeignKey(Usuario, on_delete=models.SET_NULL, null=True, related_name="notificacoes_editadas")

    def save(self, *args, **kwargs):
        # Gera√ß√£o de protocolo (somente na cria√ß√£o)
        if not self.pk and not self.protocolo:
            ibge = (self.prefeitura.codigo_ibge if self.prefeitura else '') or ''
            matricula = None
            # Se houver usu√°rio que est√° criando e ele tiver matr√≠cula
            if self.criada_por and getattr(self.criada_por, 'matricula', None):
                matricula = self.criada_por.matricula
            # sigla fixa para NOTIFICA√á√ÉO
            self.protocolo = gerar_protocolo(ibge, 'NOT', matricula=matricula)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.protocolo} - {self.nome_razao}"


# ----------------------------------------
# Model de Anexos da Notifica√ß√£o
# ----------------------------------------
class NotificacaoAnexo(models.Model):
    ANEXO_TIPO_CHOICES = [
        ("FOTO", "Foto"),
        ("DOCUMENTO", "Documento"),
        ("OUTRO", "Outro"),
    ]

    notificacao = models.ForeignKey(
        "notificacoes.Notificacao",
        on_delete=models.CASCADE,
        related_name="anexos",
    )
    tipo = models.CharField(max_length=20, choices=ANEXO_TIPO_CHOICES, default="FOTO")
    arquivo = models.FileField(upload_to=upload_anexo_path_notificacao)
    observacao = models.CharField(max_length=255, blank=True, null=True)
    largura_px = models.PositiveIntegerField(blank=True, null=True)
    altura_px = models.PositiveIntegerField(blank=True, null=True)
    hash_sha256 = models.CharField(max_length=64, blank=True, null=True)
    otimizada = models.BooleanField(default=False)
    criada_em = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "notificacoes_anexo"
        verbose_name = "Anexo da Notifica√ß√£o"
        verbose_name_plural = "Anexos das Notifica√ß√µes"
        ordering = ["-criada_em"]

    def __str__(self):
        return f"{self.tipo} - {os.path.basename(self.arquivo.name)}"

    # ---------------------------------------------------
    # Fun√ß√£o para gerar hash e metadados da imagem
    # ---------------------------------------------------
    def processar_arquivo(self):
        """Processa imagem (resize, hash, dimens√µes)"""
        if not self.arquivo:
            return

        try:
            img = Image.open(self.arquivo)
            img_format = img.format
            original_io = BytesIO()
            img.save(original_io, format=img_format)

            # Tamanho original
            self.largura_px, self.altura_px = img.size

            # Reduz se maior que 1000 px
            if self.largura_px > 1000:
                proporcao = 1000 / self.largura_px
                nova_altura = int(self.altura_px * proporcao)
                img = img.resize((1000, nova_altura))
                # Converte para RGB para evitar problemas ao salvar JPEG (ex.: PNG com alpha)
                if img.mode not in ("RGB", "L"):
                    img = img.convert("RGB")
                new_io = BytesIO()
                img.save(new_io, format="JPEG", quality=85)
                # Garante extens√£o .jpg quando reencodar como JPEG
                base, _ext = os.path.splitext(os.path.basename(self.arquivo.name))
                new_name = f"{base}.jpg"
                self.arquivo.save(new_name, ContentFile(new_io.getvalue()), save=False)
                self.otimizada = True
                self.largura_px, self.altura_px = img.size

            # Gerar hash SHA256
            hash_obj = hashlib.sha256()
            self.arquivo.seek(0)
            for chunk in self.arquivo.chunks():
                hash_obj.update(chunk)
            self.hash_sha256 = hash_obj.hexdigest()
            self.arquivo.seek(0)
        except Exception as e:
            print(f"[WARN] Falha ao processar anexo: {e}")

            
